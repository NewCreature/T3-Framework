#helpers for dealing with spaces
NOTHING:=
SPACE:=$(NOTHING) $(NOTHING)

T3F_LIBRARIES = $(T3F_PLATFORM_LIBRARIES)

T3F_CFLAGS = -DT3F_DEVELOPER_NAME="\"$(subst \ ,$(SPACE),$(APP_COMPANY))\"" -DT3F_PACKAGE_NAME="\"$(subst \ ,$(SPACE),$(APP_NAME))\"" -DT3F_APP_VERSION="\"$(subst \ ,$(SPACE),$(APP_VERSION))\"" -DT3F_APP_TITLE="\"$(subst \ ,$(SPACE),$(APP_TITLE))\"" -DT3F_APP_DATA_DIR="\"$(subst \ ,$(SPACE),$(APP_DATA_DIR))\"" -DT3F_APP_COPYRIGHT="\"$(subst \ ,$(SPACE),$(APP_COPYRIGHT))\"" -DT3F_APP_PUBLISHER="\"$(subst \ ,$(SPACE),$(APP_PUBLISHER))\"" -DT3F_APP_STEAM_ID=$(APP_STEAM_ID)

include makefile.defines
include makefile.default_config
include makefile.config

T3F_OBJECTS = $(T3F_CORE_OBJECTS) $(T3F_PLATFORM_OBJECTS)

APP_SOURCE_FILES = $(T3F_OBJECTS:.o=.c)

APP_EXE_NAME = ../bin/$(APP_NAME)$(APP_EXE_SUFFIX)$(EXE_SUFFIX)
APP_PACKAGE_NAME = $(APP_NAME)-$(APP_VERSION)
APP_PACKAGE_FILENAME = $(APP_PACKAGE_NAME)-src.tar.gz
APP_HOST_ARCHITECTURE = $(shell uname -m)
APP_BINARY_PACKAGE_FILENAME = $(APP_PACKAGE_NAME)-$(T3F_PLATFORM_NAME)-$(APP_HOST_ARCHITECTURE).tar.gz
APP_TEMP_DIR = ../temp/$(APP_PACKAGE_NAME)

all : $(APP_EXE_NAME) $(T3F_PLATFORM_TARGET) $(APP_EXTRA_TARGET)
	@echo All targets built!

finish:
	@\:

reset_config:
	rm makefile.config
	make finish

$(APP_EXE_NAME) : prepare_platform $(T3F_OBJECTS) $(APP_OBJECTS)
	$(CC) $(LFLAGS) $(CONFIG_LFLAGS) $(T3F_OBJECTS) $(APP_OBJECTS) $(APP_LIBS) $(T3F_LIBRARIES) $(DEPEND_LIBS) -o $(APP_EXE_NAME)
	@echo Executable built!

makefile.config:
	cp ../scripts/makefile.default_config ./makefile.config
	@echo Default configuration set.

../changes.txt:
	cp ../misc/blank_changes ../changes.txt

../docs/changelog:
	touch ../docs/changelog

../icons/windows_icon.ico: ../icons/16.png ../icons/24.png ../icons/32.png ../icons/48.png ../icons/256.png ../tools/makeicon$(EXE_SUFFIX)
	../tools/makeicon$(EXE_SUFFIX) -o ../icons/windows_icon.ico ../icons/16.png ../icons/24.png ../icons/32.png ../icons/48.png ../icons/64.png ../icons/256.png

release: ../changes.txt ../docs/changelog
	mv ../docs/changelog ../changelog
	cat ../changes.txt ../misc/spacer ../changelog > ../docs/changelog
	rm ../changelog
	cp ../misc/blank_changes ../changes.txt
	$(SED_COMMAND) "s|APP_TITLE|$(APP_NAME)|" ../docs/changelog
	$(SED_COMMAND) "s|APP_VERSION|$(APP_VERSION)|" ../docs/changelog
	$(SED_COMMAND) "s|APP_MAINTAINER|$(DEBIAN_MAINTAINER)|" ../docs/changelog
	$(SED_COMMAND) "s|BUILD_DATE|`date -u +"%a, %d %b %Y %T"`|" ../docs/changelog
	$(SED_COMMAND) "s|REMOVE_THIS_EMPTY_LINE||" ../docs/changelog

clean: steam_cleanup app_clean
	@$(PLATFORM_CLEAN)
	@$(DEL_COMMAND) $(subst /,$(PATH_SEPARATOR),$(T3F_OBJECTS))
	@$(DEL_COMMAND) $(subst /,$(PATH_SEPARATOR),$(APP_OBJECTS))
	@$(DEL_COMMAND) $(subst /,$(PATH_SEPARATOR),$(APP_EXE_NAME)$(EXE_SUFFIX))
	@$(DEL_COMMAND) $(subst /,$(PATH_SEPARATOR),../tools/makeicon$(EXE_SUFFIX))
ifdef APP_EXTRA_TARGET
	@$(DEL_COMMAND) $(subst /,$(PATH_SEPARATOR),$(APP_EXTRA_TARGET))
endif
	@echo Cleanup complete!

clean_packages:
	@echo Cleaning up old packages...
	@rm -f $(APP_PACKAGE_DIR)/*.tar.gz
	@rm -f $(APP_PACKAGE_DIR)/*.zip
	@rm -f $(APP_PACKAGE_DIR)/*.apk
	@rm -f $(APP_PACKAGE_DIR)/*.aab
	@rm -f $(APP_PACKAGE_DIR)/*.dmg
	@rm -rf $(APP_PACKAGE_DIR)/*.app
	@rm -rf $(APP_PACKAGE_DIR)/*.idsig
	@rm -rf $(APP_PACKAGE_DIR)/*/

#create tar.gz package for source code distribution
source_package: clean clean_packages
	$(shell rm -rf $(APP_TEMP_DIR); mkdir -p $(APP_TEMP_DIR); cp -a -R -L "../bin" $(APP_TEMP_DIR); cp -a -R -L "../src" $(APP_TEMP_DIR); cp -a -R -L "../scripts" $(APP_TEMP_DIR); cp -a -R -L "../docs" $(APP_TEMP_DIR); cp -a -R -L "../android" $(APP_TEMP_DIR); cp -a -R -L "../debian" $(APP_TEMP_DIR); cp -a -R -L "../linux" $(APP_TEMP_DIR); cp -a -R -L "../macos" $(APP_TEMP_DIR); cp -a -R -L "../tools" $(APP_TEMP_DIR); cp -a -R -L  "../windows" $(APP_TEMP_DIR); cp -a -R -L "../icons" $(APP_TEMP_DIR); cp -a -R -L "../iphone" $(APP_TEMP_DIR); cp -a -R -L "../graphics_src" $(APP_TEMP_DIR); cp -a -R -L "../packages" $(APP_TEMP_DIR); cp -a -R -L "../misc" $(APP_TEMP_DIR); cp "../changes.txt" $(APP_TEMP_DIR); cp "../issues.txt" $(APP_TEMP_DIR); cd ../temp; rm -f $(APP_PACKAGE_FILENAME); export COPY_EXTENDED_ATTRIBUTES_DISABLE=true; export COPYFILE_DISABLE=true; tar --exclude="." --exclude=".DS_Store" --exclude="old" --exclude="makefile.config" $(PACKAGE_EXCLUSIONS) --dereference -czf $(APP_PACKAGE_DIR)/$(APP_PACKAGE_FILENAME) $(APP_PACKAGE_NAME); cd ..; rm -rf temp)
	@echo Package successfully created!

source_only_package: clean clean_packages
	$(shell rm -rf $(APP_TEMP_DIR); mkdir -p $(APP_TEMP_DIR); mkdir -p $(APP_TEMP_DIR)/bin/data; cp ../bin/data/t3f.dat $(APP_TEMP_DIR)/bin/data; cp -a -R -L "../src" $(APP_TEMP_DIR); cp -a -R -L "../scripts" $(APP_TEMP_DIR); cp -a -R -L "../docs" $(APP_TEMP_DIR); cp -a -R -L "../android" $(APP_TEMP_DIR); cp -a -R -L "../debian" $(APP_TEMP_DIR); cp -a -R -L "../linux" $(APP_TEMP_DIR); cp -a -R -L "../macos" $(APP_TEMP_DIR); cp -a -R -L "../tools" $(APP_TEMP_DIR); cp -a -R -L  "../windows" $(APP_TEMP_DIR); cp -a -R -L "../icons" $(APP_TEMP_DIR); cp -a -R -L "../iphone" $(APP_TEMP_DIR); cp -a -R -L "../graphics_src" $(APP_TEMP_DIR); cp -a -R -L "../packages" $(APP_TEMP_DIR); cp -a -R -L "../misc" $(APP_TEMP_DIR); cp "../changes.txt" $(APP_TEMP_DIR); cp "../issues.txt" $(APP_TEMP_DIR); cd ../temp; rm -f $(APP_PACKAGE_FILENAME); export COPY_EXTENDED_ATTRIBUTES_DISABLE=true; export COPYFILE_DISABLE=true; tar --exclude="." --exclude=".DS_Store" --exclude="old" --exclude="makefile.config" $(PACKAGE_EXCLUSIONS) --dereference -czf $(APP_PACKAGE_DIR)/$(APP_PACKAGE_FILENAME) $(APP_PACKAGE_NAME); cd ..; rm -rf temp)
	@echo Package successfully created!

binary_package_temp: $(APP_EXE_NAME)
	@rm -rf $(APP_PACKAGE_DIR)/$(APP_BINARY_PACKAGE_FILENAME)
	@rm -rf ../temp
	@mkdir ../temp
	@mkdir ../temp/$(APP_PACKAGE_NAME)
	@echo "Copy app data..."
	@rsync -avq --exclude=".*" --exclude="temp/" ../ ../temp/$(APP_PACKAGE_NAME)
	@cp ../$(T3F_PLATFORM_NAME)/blobs/$(T3F_PLATFORM_ARCHITECTURE)/* ../temp/$(APP_PACKAGE_NAME)/bin
	@rm -rf ../temp/$(APP_PACKAGE_NAME)/src ../temp/$(APP_PACKAGE_NAME)/android ../temp/$(APP_PACKAGE_NAME)/debian ../temp/$(APP_PACKAGE_NAME)/iphone ../temp/$(APP_PACKAGE_NAME)/linux ../temp/$(APP_PACKAGE_NAME)/macos ../temp/$(APP_PACKAGE_NAME)/misc ../temp/$(APP_PACKAGE_NAME)/scripts ../temp/$(APP_PACKAGE_NAME)/tools ../temp/$(APP_PACKAGE_NAME)/packages ../temp/$(APP_PACKAGE_NAME)/windows ../temp/$(APP_PACKAGE_NAME)/graphics_src ../temp/$(APP_PACKAGE_NAME)/changes.txt ../temp/$(APP_PACKAGE_NAME)/issues.txt $(APP_PACKAGE_EXCLUDE_FILES)
	@rm -f ../temp/$(APP_PACKAGE_NAME)/bin/binaries.here
	@echo "Make install script..."
	@cp ../misc/binary_install.sh ../temp/$(APP_PACKAGE_NAME)/install.sh
	@$(SED_COMMAND) 's|T3F_APP_TITLE|$(APP_TITLE)|' ../temp/$(APP_PACKAGE_NAME)/install.sh
	@$(SED_COMMAND) 's|T3F_APP_NAME|$(APP_NAME)|' ../temp/$(APP_PACKAGE_NAME)/install.sh
	@$(SED_COMMAND) 's|T3F_APP_DIR|$(DEBIAN_DIR)|' ../temp/$(APP_PACKAGE_NAME)/install.sh
	@$(SED_COMMAND) 's|T3F_APP_CATEGORIES|$(DEBIAN_DESKTOP_CATEGORIES)|' ../temp/$(APP_PACKAGE_NAME)/install.sh
	@cp ../misc/binary_uninstall.sh ../temp/$(APP_PACKAGE_NAME)/uninstall.sh
	@$(SED_COMMAND) 's|T3F_APP_TITLE|$(APP_TITLE)|' ../temp/$(APP_PACKAGE_NAME)/uninstall.sh
	@$(SED_COMMAND) 's|T3F_APP_NAME|$(APP_NAME)|' ../temp/$(APP_PACKAGE_NAME)/uninstall.sh
	@$(SED_COMMAND) 's|T3F_APP_DIR|$(DEBIAN_DIR)|' ../temp/$(APP_PACKAGE_NAME)/uninstall.sh
	@$(SED_COMMAND) 's|T3F_APP_CATEGORIES|$(DEBIAN_DESKTOP_CATEGORIES)|' ../temp/$(APP_PACKAGE_NAME)/uninstall.sh

binary_package_common: clean binary_package_temp
	@echo "Build archive..."
	$(shell cd ../temp; tar -czf $(APP_PACKAGE_DIR)/$(APP_BINARY_PACKAGE_FILENAME) $(APP_PACKAGE_NAME); cd ..; rm -rf temp)

#make a copy of the source tree with non-repackaged data deleted
repackage_copy:
ifndef APP_REPACKAGE_DIR
	@echo Usage: make repackage APP_REPACKAGE_DIR=path
	@test
else
	rm -rf $(APP_REPACKAGE_DIR)
	mkdir $(APP_REPACKAGE_DIR)
	cp -a -R -L ../* $(APP_REPACKAGE_DIR)
	touch -c $(APP_REPACKAGE_DIR)/macos/Info.plist
	touch -c $(APP_REPACKAGE_DIR)/macos/entitlements.plist
endif

repackage_clean:
	rm -rf $(APP_REPACKAGE_DIR)/workspace
	rm -rf $(APP_REPACKAGE_DIR)/alt
ifdef APP_REPACKAGE_DELETE
	rm -rf $(APP_REPACKAGE_DELETE)
endif

repackage_fetch_docs:
ifdef APP_REPACKAGE_DOCS
	cp $(APP_REPACKAGE_DOCS) $(APP_REPACKAGE_DIR)/docs
else
	@test 0
endif

repackage_fetch_alternate_source:
ifdef APP_REPACKAGE_SRC
	cp $(APP_REPACKAGE_SRC)
else
	@test 0
endif

repackage_edit:
	$(SED_COMMAND) 's|= $(APP_NAME)|= $(APP_REPACKAGE_NAME)|' $(APP_REPACKAGE_DIR)/src/makefile.defines
	$(SED_COMMAND) 's|TITLE = $(APP_TITLE)|TITLE = $(APP_REPACKAGE_TITLE)|' $(APP_REPACKAGE_DIR)/src/makefile.defines
	$(SED_COMMAND) 's|= $(APP_ANDROID_PACKAGE)|= $(APP_REPACKAGE_PACKAGE)|' $(APP_REPACKAGE_DIR)/src/makefile.defines
	$(SED_COMMAND) 's|$(APP_NAME)|$(APP_REPACKAGE_NAME)|' $(APP_REPACKAGE_DIR)/docs/changelog

repackage_root: clean clean_packages repackage_copy repackage_clean repackage_edit repackage_fetch_alternate_source repackage_fetch_docs

../tools/makeicon$(EXE_SUFFIX): ../tools/makeicon.o
	$(CC) $(LFLAGS) ../tools/makeicon.o $(T3F_LIBRARIES) -o ../tools/makeicon

data_package_helper:
	rm -f $(APP_PACKAGE_DIR)/$(APP_NAME)-$(APP_VERSION)-data.zip
	cd ../bin && touch data/steam.dat && zip -9 -r $(APP_PACKAGE_DIR)/$(APP_NAME)-$(APP_VERSION)-data.zip data -x data/.\* && rm data/steam.dat && cd ../ && zip -9 -r packages/$(APP_NAME)-$(APP_VERSION)-data.zip docs && cd packages && zip -9 $(APP_NAME)-$(APP_VERSION)-data.zip $(APP_NAME)-$(APP_VERSION)-src.tar.gz

data_package: source_only_package steam_touch data_package_helper steam_cleanup
	@echo Data backage successfully created.

steam_touch:
	touch ../bin/data/steam.dat

steam_cleanup:
	rm -rf ../bin/data/steam.dat

steam_binary_package: $(APP_EXE_NAME)
ifndef CONFIG_STEAMWORKS_SDK_PATH
	@echo Please define 'CONFIG_STEAMWORKS_SDK_PATH' as the path to the root of the Steamworks SDK and 'CONFIG_STEAMWORKS_PLATFORM' as the name of the platform (osx or linux64) if you are not building for Windows.
else
	rm -f $(APP_PACKAGE_DIR)/$(APP_PACKAGE_NAME)-$(T3F_PLATFORM_NAME)-binaries.zip
	cd ../bin && zip -9 $(APP_PACKAGE_DIR)/$(APP_NAME)-$(APP_VERSION)-$(T3F_PLATFORM_NAME)-binaries.zip * -x data\*; cd ../$(T3F_PLATFORM_NAME)/blobs/$(T3F_PLATFORM_ARCHITECTURE) && zip -9 -r ../../$(APP_PACKAGE_DIR)/$(APP_NAME)-$(APP_VERSION)-$(T3F_PLATFORM_NAME)-binaries.zip * -x binaries.here || true
	cd $(CONFIG_STEAMWORKS_SDK_PATH)/redistributable_bin/$(CONFIG_STEAMWORKS_PLATFORM) && zip -9 -r "$(PWD)/$(APP_PACKAGE_DIR)/$(APP_NAME)-$(APP_VERSION)-$(T3F_PLATFORM_NAME)-binaries.zip" *.dll *.so *.dylib || true
endif

steam_packages_common: data_package all steam_binary_package
	@echo Successfully created Steam data and binary packages for the the current platform.
